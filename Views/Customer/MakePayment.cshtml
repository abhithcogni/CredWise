@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    // This is where you can set ViewBag or other Razor-specific logic if needed
}
@model CredWise_Trail.ViewModels.MakePaymentViewModel 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Make Payment - Customer Portal</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
          xintegrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
          xintegrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa;
            color: #343a40;
            line-height: 1.6;
        }

        /* Page Header */
        .h2.fw-bold {
            color: #2c3e50;
        }

        /* Cards */
        .payment-summary-card,
        .make-payment-card {
            border: none;
            border-radius: 0.85rem;
            box-shadow: 0 8px 25px rgba(0, 0, 0, .07);
            background-color: #ffffff;
            overflow: hidden;
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        }

            .payment-summary-card:hover,
            .make-payment-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 30px rgba(0, 0, 0, .09);
            }

        .card-header {
            background-color: #0A2463;
            color: #ffffff;
            border-bottom: none;
            font-weight: 600;
            font-size: 1.05rem;
            /* Slightly smaller than admin header */
            padding: 0.9rem 1.25rem;
            letter-spacing: 0.3px;
        }

            .card-header .fas {
                margin-right: 0.6rem;
            }

        .summary-label {
            color: #6c757d;
            /* Muted text for labels */
            font-size: 0.9rem;
        }

        .summary-value {
            font-weight: 500;
            font-size: 0.95rem;
        }

        /* Form Elements */
        .form-label {
            font-weight: 500;
            color: #495057;
            font-size: 0.9rem;
        }

        .form-control,
        .form-select {
            border-radius: 0.375rem;
            border: 1px solid #ced4da;
            padding: 0.6rem 0.8rem;
            font-size: 0.9rem;
        }

            .form-control:focus,
            .form-select:focus {
                border-color: #0A2463;
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, .15);
            }

        .input-group-text {
            background-color: #e9ecef;
            border: 1px solid #ced4da;
            font-size: 0.9rem;
        }

        /* Buttons */
        .stylish-button {
            padding: 0.65rem 1.5rem;
            font-weight: 500;
            border-radius: 0.375rem;
            letter-spacing: 0.3px;
            transition: all 0.2s ease-in-out;
        }

            .stylish-button .fas {
                margin-right: 0.5rem;
                transition: transform 0.2s ease-in-out;
            }

            .stylish-button:hover .fas {
                transform: scale(1.1);
            }

        .btn-primary.stylish-button:hover {
            box-shadow: 0 4px 10px rgba(13, 110, 253, .25);
        }

        /* Payment status icons */
        .status-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }

        .text-success .status-icon {
            color: #198754;
        }

        .text-danger .status-icon {
            color: #dc3545;
        }

        #proceedToPayButton {
            background-color: #3E92CC;
        }

            #proceedToPayButton:hover {
                background-color: #0A2463;
                border-color: white;
            }

        .form-check-label a {
            color: #3E92CC;
            text-decoration: none;
        }

            .form-check-label a:hover {
                text-decoration: underline;
                color: #0A2463;
            }

        #confirmPayButton {
            background-color: #3E92CC;
        }

            #confirmPayButton:hover {
                background-color: #0A2463;
                border-color: white;
            }

        #paymentStatusModalHeader {
            background-color: #0A2463 !important;
        }

        #paymentStatusCloseButton {
            background-color: #3E92CC;
        }

            #paymentStatusCloseButton:hover {
                background-color: #0A2463;
                border-color: white;
            }

        /* Overdue Specific Styling */
        .overdue-info {
            background-color: #fcebe9; /* Light red/peach for overdue */
            border: 1px solid #f0b4ae;
            border-radius: 0.5rem;
            padding: 1rem;
            margin-bottom: 1.5rem;
            color: #a72200; /* Darker red text */
            font-weight: 500;
        }
        .overdue-info .fas {
            color: #dc3545; /* Red icon */
            margin-right: 0.5rem;
        }
        .overdue-info .amount {
            font-size: 1.1rem;
            font-weight: 700;
            color: #c62828;
        }

        /* Message Box for client-side validation */
        .message-box {
            padding: 10px;
            border-radius: 0.375rem;
            margin-top: 15px;
            text-align: center;
            font-weight: 500;
        }
        .message-box.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

    </style>
</head>

<body>
    <div class="d-flex" id="wrapper">
        <div id="page-content-wrapper" class="w-100">


            <div class="container-fluid p-4 p-md-5">
                <div class="mb-4">
                    <h1 class="h2 fw-bold">Make a Payment</h1>
                    <p class="text-muted" id="paymentPageSubtitle">Securely pay your outstanding loan amount.</p>
                </div>

                <div class="row">
                    <div class="col-lg-7 col-xl-6 mb-4 mb-lg-0">
                        <div class="card payment-summary-card">
                            <div class="card-header">
                                <i class="fas fa-file-invoice-dollar me-2"></i>Payment Due Summary
                            </div>
                            <div class="card-body p-4">
                                <h5 class="card-title" id="loanProductName">@Model.ProductName</h5>
                                <p class="card-text text-muted" id="loanShortDescription">@Model.ShortDescription</p>
                                <hr>
                                <div class="row mb-2">
                                    <div class="col-6 summary-label">Monthly Installment (EMI):</div>
                                    <div class="col-6 summary-value" id="monthlyInstallment">$@Model.MonthlyInstallmentAmount.ToString("N2")</div>
                                </div>
                                <div class="row mb-2">
                                    <div class="col-6 summary-label">Total Amount Due Now:</div>
                                    <div class="col-6 summary-value fw-bold fs-5" id="amountDueDisplay"></div> @* Updated ID *@
                                </div>
                                <div class="row mb-2">
                                    <div class="col-6 summary-label">Next Payment Due Date:</div>
                                    <div class="col-6 summary-value" id="dueDateDisplay"></div> @* Updated ID *@
                                </div>
                                <div class="row">
                                    <div class="col-6 summary-label">Outstanding Balance:</div>
                                    <div class="col-6 summary-value" id="outstandingBalanceDisplay"></div> @* Updated ID *@
                                </div>

                                @* NEW: Overdue Information Section *@
                                <div id="overdueInfoSection" class="overdue-info mt-3 @(Model.IsOverdue ? "" : "d-none")">
                                    <p>
                                        <i class="fas fa-exclamation-triangle"></i>
                                        <strong>Overdue!</strong> Your loan is currently <span id="overdueMonthsDisplay">@Model.OverdueMonths</span> month(s) overdue.
                                    </p>
                                    <p>
                                        Total Overdue Amount: <span class="amount" id="currentOverdueAmountDisplay">$@Model.CurrentOverdueAmount.ToString("N2")</span>
                                    </p>
                                    <p class="small text-muted">
                                        The "Total Amount Due Now" includes this overdue amount.
                                    </p>
                                </div>
                                @* END NEW *@

                                @* Updated messages based on loan status and payment state *@
                                <div id="paymentSuccessMessage" class="alert alert-success mt-3 d-none" role="alert"></div>
                                <div id="noPaymentDueMessage" class="alert alert-info mt-3 d-none" role="alert"></div>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-5 col-xl-6">
                        <div class="card make-payment-card">
                            <div class="card-header">
                                <i class="fas fa-credit-card me-2"></i>Payment Details
                            </div>
                            <div class="card-body p-4">
                                <form id="paymentForm">
                                    <div class="mb-3">
                                        <label for="paymentAmount" class="form-label">Payment Amount</label>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <input type="number" class="form-control" id="paymentAmount"
                                                   name="paymentAmount" step="0.01" required>
                                        </div>
                                        <div class="form-text">
                                            You can pay the full amount or a partial amount (if allowed).
                                            Minimum payment: $<span id="minPaymentDisplay">@Model.MinPayment.ToString("N2")</span>
                                        </div>
                                        <div id="paymentAmountError" class="message-box error" style="display:none;"></div> @* Client-side error message *@
                                    </div>

                                    <div class="mb-3">
                                        <label for="paymentMethod" class="form-label">Payment Method</label>
                                        <select class="form-select" id="paymentMethod" name="paymentMethod" required>
                                            <option value="" selected disabled>Select a payment method...</option>
                                            <option value="Debit Card">Debit Card</option>
                                            <option value="Credit Card">Credit Card</option>
                                            <option value="Net Banking">Net Banking</option>
                                            @* Add more options if needed, e.g., "new_bank", "new_card" *@
                                        </select>
                                    </div>

                                    @* Removed dynamic newPaymentMethodFields for simplicity based on provided HTML,
                                       but you can re-add if needed with JS logic. *@

                                    <div class="form-check mt-3 mb-3">
                                        <input class="form-check-input" type="checkbox" value="" id="termsAndConditions"
                                               required>
                                        <label class="form-check-label small" for="termsAndConditions">
                                            I agree to the <a href="#">Terms and Conditions</a> of this payment.
                                        </label>
                                    </div>

                                    <button type="submit" class="btn btn-primary w-100 stylish-button"
                                            id="proceedToPayButton">
                                        <i class="fas fa-arrow-circle-right me-2"></i>Proceed to Pay
                                    </button>
                                    <button type="button" class="btn btn-success w-100 stylish-button mt-2 d-none"
                                            id="paymentCompletedButton" disabled>
                                        <i class="fas fa-check-circle me-2"></i>Payment Completed
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="paymentConfirmationModal" tabindex="-1"
                 aria-labelledby="paymentConfirmationModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="paymentConfirmationModalLabel">
                                <i class="fas fa-question-circle me-2 text-primary"></i>Confirm Payment
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Please review your payment details:</p>
                            <ul class="list-unstyled">
                                <li><strong>Loan:</strong> <span id="confirmLoanName"></span></li>
                                <li>
                                    <strong>Payment Amount:</strong> <span id="confirmPaymentAmount"
                                                                           class="fw-bold"></span>
                                </li>
                                <li><strong>Payment Method:</strong> <span id="confirmPaymentMethod"></span></li>
                            </ul>
                            <p class="text-muted small mt-3">
                                By clicking "Confirm & Pay", you authorize this payment.
                            </p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-secondary"
                                    data-bs-dismiss="modal">
                                Cancel
                            </button>
                            <button type="button" class="btn btn-primary" id="confirmPayButton">
                                <i class="fas fa-shield-alt me-2"></i>Confirm & Pay
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="paymentStatusModal" tabindex="-1" aria-labelledby="paymentStatusModalLabel"
                 aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header" id="paymentStatusModalHeader">
                            <h5 class="modal-title" id="paymentStatusModalLabel">Processing Payment...</h5>
                        </div>
                        <div class="modal-body text-center py-4">
                            <div id="paymentProcessingSpinner" class="mb-3">
                                <div class="spinner-border text-primary" role="status"
                                     style="width: 3rem; height: 3rem;">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Please wait, we are securely processing your payment.</p>
                            </div>
                            <div id="paymentStatusResult" class="d-none">
                            </div>
                        </div>
                        <div class="modal-footer d-none" id="paymentStatusModalFooter">
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal"
                                    id="paymentStatusCloseButton">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
            integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            xintegrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous"></script>
    <script>
        $(document).ready(function () {
            // --- Initial Loan Data (Populated from server-side Model) ---
            let loanData = {
                loanId: @Model.LoanId,
                productName: "@Html.Raw(Model.ProductName)",
                shortDescription: "@Html.Raw(Model.ShortDescription)",
                monthlyInstallmentAmount: @Model.MonthlyInstallmentAmount, // Added EMI
                amountDue: @Model.AmountDue, // This is the current EMI amount or remaining due + overdue
                dueDate: "@(Model.DueDate.HasValue ? Model.DueDate.Value.ToShortDateString() : "N/A")", // Formatted for display
                outstandingBalance: @Model.OutstandingBalance,
                minPayment: @Model.MinPayment, // This is the EMI
                isPaymentDue: @Model.IsPaymentDue.ToString().ToLower(),
                overdueMonths: @Model.OverdueMonths, // New
                currentOverdueAmount: @Model.CurrentOverdueAmount, // New
                isOverdue: @Model.IsOverdue.ToString().ToLower(), // New
                loanStatus: "@Html.Raw(Model.LoanStatus)" // New: Pass loan status to JS
            };

            const confirmationModal = new bootstrap.Modal(document.getElementById('paymentConfirmationModal'));
            const statusModal = new bootstrap.Modal(document.getElementById('paymentStatusModal'));

            // --- Populate Initial Data ---
            function populateLoanDetails() {
                $('#loanProductName').text(loanData.productName);
                $('#loanShortDescription').text(loanData.shortDescription);
                $('#monthlyInstallment').text('$' + loanData.monthlyInstallmentAmount.toFixed(2));
                $('#outstandingBalanceDisplay').text('$' + loanData.outstandingBalance.toFixed(2));
                $('#minPaymentDisplay').text(loanData.minPayment.toFixed(2)); // Update min payment text

                // --- Handle different loan states ---
                if (loanData.loanStatus === "Closed") {
                    $('#paymentForm').hide();
                    $('#noPaymentDueMessage').addClass('d-none');
                    $('#overdueInfoSection').addClass('d-none'); // Ensure overdue section is hidden if closed
                    $('#paymentSuccessMessage').removeClass('d-none').html('<i class="fas fa-check-circle me-2"></i>Congratulations! Your loan has been fully paid and closed.');
                    $('#proceedToPayButton').addClass('d-none').prop('disabled', true);
                    $('#paymentCompletedButton').removeClass('d-none').text('Loan Fully Paid').prop('disabled', true);
                    $('#paymentPageSubtitle').text('Your loan has been successfully closed.');
                    $('#amountDueDisplay').text('$0.00').removeClass('text-danger').addClass('text-success');
                    $('#dueDateDisplay').text('N/A');
                    return; // Exit function as loan is closed
                }

                // If loan is active but current cycle paid (AmountDue is 0, but outstanding balance > 0)
                if (loanData.amountDue === 0 && loanData.outstandingBalance > 0) {
                    $('#amountDueDisplay').text('$0.00').removeClass('text-danger').addClass('text-success');
                    $('#dueDateDisplay').text(loanData.dueDate); // Show next due date
                    $('#overdueInfoSection').addClass('d-none'); // Hide overdue section
                    $('#paymentForm').hide(); // Hide the form
                    $('#noPaymentDueMessage').removeClass('d-none').html('<i class="fas fa-info-circle me-2"></i>You have completed this month\'s payment. Your next payment is due on <strong>' + loanData.dueDate + '</strong>.');
                    $('#paymentSuccessMessage').addClass('d-none'); // Hide general success message
                    $('#proceedToPayButton').addClass('d-none').prop('disabled', true);
                    $('#paymentCompletedButton').addClass('d-none');
                    $('#paymentPageSubtitle').text('Payment for the current cycle is complete.');
                } else if (loanData.amountDue > 0 && loanData.isPaymentDue) { // Payment is due (might be overdue or current EMI)
                    $('#amountDueDisplay').text('$' + loanData.amountDue.toFixed(2)).removeClass('text-success').addClass('text-danger');
                    $('#dueDateDisplay').text(loanData.dueDate);
                    $('#paymentAmount').val(loanData.amountDue.toFixed(2)); // Pre-fill with amount due
                    $('#paymentForm').show();
                    $('#proceedToPayButton').removeClass('d-none').prop('disabled', false);
                    $('#paymentCompletedButton').addClass('d-none');
                    $('#noPaymentDueMessage').addClass('d-none');
                    $('#paymentSuccessMessage').addClass('d-none');
                    $('#paymentPageSubtitle').text('Securely pay your outstanding loan amount.');

                    if (loanData.isOverdue) {
                        $('#overdueInfoSection').removeClass('d-none');
                        $('#overdueMonthsDisplay').text(loanData.overdueMonths);
                        $('#currentOverdueAmountDisplay').text('$' + loanData.currentOverdueAmount.toFixed(2));
                    } else {
                        $('#overdueInfoSection').addClass('d-none'); // Hide overdue section if not overdue
                    }
                } else { // No payment due (e.g., future due date, or loan just disbursed and next due date is future)
                    $('#amountDueDisplay').text('$0.00').removeClass('text-danger').addClass('text-success');
                    $('#dueDateDisplay').text(loanData.dueDate);
                    $('#overdueInfoSection').addClass('d-none');
                    $('#paymentForm').hide();
                    $('#noPaymentDueMessage').removeClass('d-none').html('<i class="fas fa-info-circle me-2"></i>No payment is currently due for this loan. Your next payment is on <strong>' + loanData.dueDate + '</strong>.');
                    $('#paymentSuccessMessage').addClass('d-none');
                    $('#proceedToPayButton').addClass('d-none').prop('disabled', true);
                    $('#paymentCompletedButton').addClass('d-none');
                    $('#paymentPageSubtitle').text('View your loan summary.');
                }
            }

            populateLoanDetails(); // Call this function on page load to display initial data

            // --- Handle Payment Method Change (if you re-add new payment method fields) ---
            // $('#paymentMethod').on('change', function () {
            //     if ($(this).val() === 'new_bank' || $(this).val() === 'new_card') {
            //         $('#newPaymentMethodFields').removeClass('d-none');
            //     } else {
            //         $('#newPaymentMethodFields').addClass('d-none');
            //     }
            // });

            // --- Handle Form Submission (Proceed to Pay) ---
            $('#paymentForm').on('submit', function (e) {
                e.preventDefault();
                $('#paymentAmountError').hide(); // Hide previous errors

                if (!this.checkValidity()) {
                    e.stopPropagation();
                    $(this).addClass('was-validated');
                    return;
                }
                $(this).removeClass('was-validated');

                const paymentAmount = parseFloat($('#paymentAmount').val());
                const paymentMethodText = $('#paymentMethod option:selected').text();

                // Client-side validation for amount:
                if (loanData.isPaymentDue && paymentAmount < loanData.minPayment) {
                    $('#paymentAmountError').text(`Minimum payment amount is $${loanData.minPayment.toFixed(2)}.`).show();
                    $('#paymentAmount').addClass('is-invalid');
                    return;
                }

                if (paymentAmount > loanData.outstandingBalance) {
                    $('#paymentAmountError').text(`Payment amount cannot exceed the outstanding balance of $${loanData.outstandingBalance.toFixed(2)}.`).show();
                    $('#paymentAmount').addClass('is-invalid');
                    return;
                }

                $('#paymentAmount').removeClass('is-invalid'); // Clear invalid state if valid

                $('#confirmLoanName').text(loanData.productName);
                $('#confirmPaymentAmount').text('$' + paymentAmount.toFixed(2));
                $('#confirmPaymentMethod').text(paymentMethodText);

                confirmationModal.show();
            });

            // --- Handle Actual Payment Confirmation (AJAX Call to Backend) ---
            $('#confirmPayButton').on('click', function () {
                confirmationModal.hide();

                // Show processing modal
                $('#paymentStatusModalLabel').text('Processing Payment...');
                $('#paymentStatusModalHeader').removeClass('bg-success bg-danger text-white').addClass('bg-primary text-white');
                $('#paymentProcessingSpinner').removeClass('d-none');
                $('#paymentStatusResult').addClass('d-none');
                $('#paymentStatusModalFooter').addClass('d-none');
                statusModal.show();

                const paymentAmount = parseFloat($('#paymentAmount').val());
                const paymentMethod = $('#paymentMethod').val(); // Get the actual value for backend


                // Make AJAX call to your backend
                $.ajax({
                    url: '/Customer/ProcessPayment', // Adjust to your actual controller/action path
                    type: 'POST',
                    contentType: 'application/json', // Indicate sending JSON
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // Include anti-forgery token
                    },
                    data: JSON.stringify({ // Stringify the JavaScript object to JSON
                        loanId: loanData.loanId, // Send the loan ID from your initial data
                        paymentAmount: paymentAmount,
                        paymentMethod: paymentMethod
                    }),
                    success: function (response) {
                        $('#paymentProcessingSpinner').addClass('d-none');
                        $('#paymentStatusResult').removeClass('d-none');
                        $('#paymentStatusModalFooter').removeClass('d-none');

                        if (response.success) {
                            $('#paymentStatusModalHeader').removeClass('bg-primary').addClass('bg-success text-white');
                            $('#paymentStatusModalLabel').text('Payment Successful!');
                            $('#paymentStatusResult').html(`
                                <div class="text-success"><i class="fas fa-check-circle status-icon"></i></div>
                                <p class="fs-5">Your payment of <strong>$${paymentAmount.toFixed(2)}</strong> has been processed successfully.</p>
                                <p>Transaction ID: ${response.transactionId}</p>
                            `);
                            $('#paymentStatusCloseButton').removeClass('btn-danger').addClass('btn-primary');
                            $('#paymentStatusCloseButton').on("click",function(){
                                window.location.href = '@Url.Action("AcceptedLoans", "Customer")';
                            })
                            // --- Update local loanData based on successful payment ---
                            loanData.outstandingBalance = response.newOutstandingBalance;
                            loanData.amountDue = response.newAmountDue;
                            loanData.dueDate = response.newNextDueDate; // Server sends formatted string
                            loanData.overdueMonths = response.newOverdueMonths;
                            loanData.currentOverdueAmount = response.newCurrentOverdueAmount;
                            loanData.isOverdue = (loanData.currentOverdueAmount > 0); // Re-evaluate isOverdue
                            loanData.loanStatus = response.newLoanStatus; // Update loan status

                            loanData.isPaymentDue = (loanData.amountDue > 0); // Re-evaluate if payment is still due

                            populateLoanDetails();
        // Re-render the summary card with updated data
                            // The populateLoanDetails will handle hiding/showing form/buttons based on updated loanData.loanStatus and amountDue
                        } else {
                            $('#paymentStatusModalHeader').removeClass('bg-primary').addClass('bg-danger text-white');
                            $('#paymentStatusModalLabel').text('Payment Failed');
                            $('#paymentStatusResult').html(`
                                <div class="text-danger"><i class="fas fa-times-circle status-icon"></i></div>
                                <p class="fs-5">Your payment of <strong>$${paymentAmount.toFixed(2)}</strong> could not be processed.</p>
                                <p>Reason: ${response.message || 'An unknown error occurred.'}</p>
                                <p>${response.reason || 'Please try again or contact support.'}</p>
                            `);
                            $('#paymentStatusCloseButton').removeClass('btn-primary').addClass('btn-danger');
                        }
                    },
                    error: function (xhr, status, error) {
                        $('#paymentProcessingSpinner').addClass('d-none');
                        $('#paymentStatusResult').removeClass('d-none');
                        $('#paymentStatusModalFooter').removeClass('d-none');

                        let errorMessage = "An unexpected error occurred.";
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        } else if (xhr.responseText) {
                            try {
                                let res = JSON.parse(xhr.responseText);
                                errorMessage = res.message || errorMessage;
                            } catch (e) {
                                errorMessage = xhr.responseText;
                            }
                        }

                        $('#paymentStatusModalHeader').removeClass('bg-primary').addClass('bg-danger text-white');
                        $('#paymentStatusModalLabel').text('Payment Error');
                        $('#paymentStatusResult').html(`
                            <div class="text-danger"><i class="fas fa-times-circle status-icon"></i></div>
                            <p class="fs-5">There was an issue processing your payment.</p>
                            <p>Error: ${errorMessage}</p>
                            <p>Please try again or contact support.</p>
                        `);
                        $('#paymentStatusCloseButton').removeClass('btn-primary').addClass('btn-danger');
                    }
                });
            });

            // Clear validation on input
            $('#paymentAmount').on('input', function () {
                $(this).removeClass('is-invalid');
                $('#paymentAmountError').hide(); // Hide error message on input
            });
            $('#paymentForm select, #paymentForm input[type="checkbox"]').on('change', function () {
                $(this).removeClass('is-invalid');
                $('#paymentForm').removeClass('was-validated'); // Reset overall form validation state on interaction
            });
        });
    </script>
</body>

</html>
