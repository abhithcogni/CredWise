@model CredWise_Trail.Models.LoanApplication // Assuming your model's namespace
@{
    ViewData["Title"] = "Make Payment";
    // Layout = "_CustomerLayout"; // If you have a specific customer layout
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Customer Portal</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
          integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa;
            color: #343a40;
            line-height: 1.6;
        }

        .h2.fw-bold {
            color: #2c3e50;
        }

        .payment-summary-card, .make-payment-card {
            border: none;
            border-radius: 0.85rem;
            box-shadow: 0 8px 25px rgba(0, 0, 0, .07);
            background-color: #ffffff;
            overflow: hidden;
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        }

            .payment-summary-card:hover, .make-payment-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 30px rgba(0, 0, 0, .09);
            }

        .card-header {
            background-color: #0A2463; /* Primary blue */
            color: #ffffff;
            border-bottom: none;
            font-weight: 600;
            font-size: 1.05rem;
            padding: 0.9rem 1.25rem;
            letter-spacing: 0.3px;
        }

            .card-header .fas {
                margin-right: 0.6rem;
            }

        .summary-label {
            color: #6c757d;
            font-size: 0.9rem;
        }

        .summary-value {
            font-weight: 500;
            font-size: 0.95rem;
        }

        .form-label {
            font-weight: 500;
            color: #495057;
            font-size: 0.9rem;
        }

        .form-control, .form-select {
            border-radius: 0.375rem;
            border: 1px solid #ced4da;
            padding: 0.6rem 0.8rem;
            font-size: 0.9rem;
        }

            .form-control:focus, .form-select:focus {
                border-color: #0A2463; /* Primary blue focus */
                box-shadow: 0 0 0 0.25rem rgba(10, 36, 99, .15); /* Adjusted shadow to match #0A2463 */
            }

        .input-group-text {
            background-color: #e9ecef;
            border: 1px solid #ced4da;
            font-size: 0.9rem;
        }

        .stylish-button {
            padding: 0.65rem 1.5rem;
            font-weight: 500;
            border-radius: 0.375rem;
            letter-spacing: 0.3px;
            transition: all 0.2s ease-in-out;
        }

            .stylish-button .fas {
                margin-right: 0.5rem;
                transition: transform 0.2s ease-in-out;
            }

            .stylish-button:hover .fas {
                transform: scale(1.1);
            }

        #proceedToPayButton {
            background-color: #3E92CC;
            border-color: #3E92CC;
        }
            /* Accent Blue */
            #proceedToPayButton:hover {
                background-color: #0A2463;
                border-color: #0A2463;
            }
        /* Primary blue on hover */

        .form-check-label a {
            color: #3E92CC;
            text-decoration: none;
        }

            .form-check-label a:hover {
                text-decoration: underline;
                color: #0A2463;
            }

        #confirmPayButton {
            background-color: #3E92CC;
            border-color: #3E92CC;
        }

            #confirmPayButton:hover {
                background-color: #0A2463;
                border-color: #0A2463;
            }

        #paymentStatusModalHeader {
            background-color: #0A2463 !important;
            color: white;
        }
        /* Primary blue */
        #paymentStatusCloseButton {
            background-color: #3E92CC;
            border-color: #3E92CC;
        }

            #paymentStatusCloseButton:hover {
                background-color: #0A2463;
                border-color: #0A2463;
            }

        .status-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }

        .text-success .status-icon {
            color: #198754;
        }

        .text-danger .status-icon {
            color: #dc3545;
        }
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        <div id="page-content-wrapper" class="w-100">
            <div class="container-fluid p-4 p-md-5">
                <div class="mb-4">
                    <h1 class="h2 fw-bold">Make a Payment</h1>
                    <p class="text-muted" id="paymentPageSubtitle">
                        @if (Model != null && Model.LoanStatus == "Active" || Model.LoanStatus == "Overdue")
                        {
                            @:Securely pay your outstanding loan amount for @Model.LoanProduct?.ProductName (@Model.LoanNumber).
                        }
                        else if (Model != null && Model.LoanStatus == "Closed")
                        {
                            @:This loan (@Model.LoanProduct?.ProductName - @Model.LoanNumber) is closed.
                        }
                        else if (ViewBag.NoPaymentDueMessage != null)
                        {
                            @ViewBag.NoPaymentDueMessage
                        }
                        else
                        {
                            @:Loan details are currently unavailable.
                        }
                    </p>
                </div>

                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
                }

                @if (Model != null)
                {
                    <div class="row">
                        <div class="col-lg-7 col-xl-6 mb-4 mb-lg-0">
                            <div class="card payment-summary-card">
                                <div class="card-header">
                                    <i class="fas fa-file-invoice-dollar me-2"></i>Payment Due Summary
                                </div>
                                <div class="card-body p-4">
                                    <h5 class="card-title" id="loanProductName">
                                        @Model.LoanProduct?.ProductName (@Model.LoanNumber)
                                    </h5>
                                    <p class="card-text text-muted" id="loanShortDescription">
                                        Current Status: <span class="fw-bold @(Model.LoanStatus == "Overdue" ? "text-danger" : (Model.LoanStatus == "Closed" ? "text-success" : "text-info"))">@Model.LoanStatus</span>
                                    </p>
                                    <hr>
                                    <div class="row mb-2">
                                        <div class="col-6 summary-label">Amount Currently Due:</div>
                                        <div class="col-6 summary-value fw-bold fs-5 @(Model.AmountDue > 0 ? "text-danger" : "text-success")" id="amountDueDisplay">
                                            INR @Model.AmountDue.ToString("N2")
                                        </div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-6 summary-label">Next Due Date:</div>
                                        <div class="col-6 summary-value" id="dueDateDisplay">
                                            @(Model.NextDueDate?.ToString("MMMM d, yyyy") ?? "N/A")
                                        </div>
                                    </div>
                                    @if (Model.LoanStatus == "Overdue")
                                    {
                                        <div class="row mb-2">
                                            <div class="col-6 summary-label text-danger">Overdue Months:</div>
                                            <div class="col-6 summary-value text-danger" id="overdueMonthsDisplay">@Model.OverdueMonths</div>
                                        </div>
                                        <div class="row mb-2">
                                            <div class="col-6 summary-label text-danger">Total Overdue Amount:</div>
                                            <div class="col-6 summary-value text-danger" id="currentOverdueAmountDisplay">INR @Model.CurrentOverdueAmount.ToString("N2")</div>
                                        </div>
                                    }
                                    <div class="row">
                                        <div class="col-6 summary-label">Total Outstanding Balance:</div>
                                        <div class="col-6 summary-value" id="outstandingBalanceDisplay">INR @Model.OutstandingBalance.ToString("N2")</div>
                                    </div>

                                    <div id="paymentSuccessPageMessage" class="alert alert-success mt-3 d-none" role="alert">
                                        <i class="fas fa-check-circle me-2"></i>Payment successful! Your loan details have been updated.
                                    </div>
                                    <div id="noPaymentDuePageMessage" class="alert alert-info mt-3 @(Model.LoanStatus == "Closed" || (ViewBag.NoPaymentDueMessage != null && Model.LoanStatus != "Active" && Model.LoanStatus != "Overdue") ? "" : "d-none")" role="alert">
                                        <i class="fas fa-info-circle me-2"></i>
                                        @if (Model.LoanStatus == "Closed")
                                        {
                                            @:No payment is due as this loan is fully paid and closed.
                                        }
                                        else
                                        {
                                            @ViewBag.NoPaymentDueMessage
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (Model.LoanStatus == "Active" || Model.LoanStatus == "Overdue") // Only show payment form if loan is active or overdue
                        {
                            <div class="col-lg-5 col-xl-6">
                                <div class="card make-payment-card">
                                    <div class="card-header">
                                        <i class="fas fa-credit-card me-2"></i>Payment Details
                                    </div>
                                    <div class="card-body p-4">
                                        <form id="paymentForm" asp-controller="Customer" asp-action="ProcessPayment" method="post">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="loanId" id="loanId" value="@Model.ApplicationId" />

                                            <div class="mb-3">
                                                <label for="paymentAmount" class="form-label">Payment Amount (INR)</label>
                                                <div class="input-group">
                                                    <span class="input-group-text">₹</span>
                                                    <input type="number" class="form-control" id="paymentAmount"
                                                           name="paidAmount" step="0.01" min="1.00"
                                                           value="@(Model.AmountDue > 0 ? Model.AmountDue.ToString("F2") : "100.00")" required>
                                                </div>
                                                <div class="form-text">
                                                    Enter the amount you wish to pay.
                                                    @if (Model.LoanStatus == "Overdue")
                                                    {
                                                        <span class="text-danger">Your loan is overdue. Minimum payment to clear dues: INR @Model.CurrentOverdueAmount.ToString("N2")</span>
                                                    }
                                                </div>
                                            </div>

                                            <div class="mb-3">
                                                <label for="paymentMethod" class="form-label">Payment Method</label>
                                                <select class="form-select" id="paymentMethod" name="paymentMethod" required>
                                                    <option value="" selected disabled>Select a payment method...</option>
                                                    <option value="UPI">UPI</option>
                                                    <option value="Net Banking">Net Banking</option>
                                                    <option value="Debit Card">Debit Card</option>
                                                    <option value="Credit Card">Credit Card</option>
                                                </select>
                                            </div>

                                            <div class="form-check mt-3 mb-3">
                                                <input class="form-check-input" type="checkbox" value="" id="termsAndConditions" required>
                                                <label class="form-check-label small" for="termsAndConditions">
                                                    I agree to the <a href="#" target="_blank">Terms and Conditions</a> of this payment.
                                                </label>
                                            </div>

                                            <button type="submit" class="btn btn-primary w-100 stylish-button" id="proceedToPayButton">
                                                <i class="fas fa-arrow-circle-right me-2"></i>Proceed to Pay
                                            </button>
                                            <div id="paymentProcessingLoader" class="text-center mt-2 d-none">
                                                <div class="spinner-border text-primary" role="status">
                                                    <span class="visually-hidden">Processing...</span>
                                                </div>
                                                <p>Processing payment...</p>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (ViewBag.NoPaymentDueMessage == null) // Only show if not already handled by NoPaymentDueMessage
                {
                    <div class="alert alert-warning">Loan details could not be loaded. Please try again or contact support.</div>
                }
            </div>

            <div class="modal fade" id="paymentStatusModal" tabindex="-1" aria-labelledby="paymentStatusModalLabel"
                 aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header" id="paymentStatusModalHeader">
                            <h5 class="modal-title" id="paymentStatusModalLabel">Processing Payment...</h5>
                        </div>
                        <div class="modal-body text-center py-4">
                            <div id="paymentProcessingSpinnerModal" class="mb-3">
                                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Please wait, we are securely processing your payment.</p>
                            </div>
                            <div id="paymentStatusResult" class="d-none">
                            </div>
                        </div>
                        <div class="modal-footer d-none" id="paymentStatusModalFooter">
                            <button type="button" class="btn btn-primary" id="paymentStatusCloseButton" data-bs-dismiss="modal">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
            integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous"></script>
    <script>
        $(document).ready(function () {
            const statusModalElement = document.getElementById('paymentStatusModal');
            const statusModal = new bootstrap.Modal(statusModalElement);
            const paymentForm = $('#paymentForm');
            const proceedButton = $('#proceedToPayButton');
            const processingLoader = $('#paymentProcessingLoader'); // Loader beneath button

            // For displaying results in the modal
            const modalHeader = $('#paymentStatusModalHeader');
            const modalLabel = $('#paymentStatusModalLabel');
            const modalSpinner = $('#paymentProcessingSpinnerModal');
            const modalResultDiv = $('#paymentStatusResult');
            const modalFooter = $('#paymentStatusModalFooter');
            const modalCloseButton = $('#paymentStatusCloseButton');


            paymentForm.on('submit', function (e) {
                e.preventDefault();
                if (!this.checkValidity()) {
                    e.stopPropagation();
                    $(this).addClass('was-validated');
                    return;
                }
                $(this).removeClass('was-validated');

                proceedButton.prop('disabled', true).addClass('d-none');
                processingLoader.removeClass('d-none'); // Show loader under button

                // Prepare for status modal
                modalLabel.text('Processing Payment...');
                modalHeader.removeClass('bg-success bg-danger').addClass('bg-primary'); // Reset header
                modalSpinner.removeClass('d-none');
                modalResultDiv.addClass('d-none').html('');
                modalFooter.addClass('d-none');
                statusModal.show();


                $.ajax({
                    type: "POST",
                    url: $(this).attr('action'),
                    data: $(this).serialize(), // Sends form data including AntiForgeryToken
                    dataType: "json",
                    success: function (response) {
                        modalSpinner.addClass('d-none');
                        modalResultDiv.removeClass('d-none');
                        modalFooter.removeClass('d-none');

                        if (response.success) {
                            modalHeader.removeClass('bg-primary').addClass('bg-success text-white');
                            modalLabel.text('Payment Successful!');
                            modalResultDiv.html(
                                `<div class="text-success"><i class="fas fa-check-circle status-icon"></i></div>
                                 <p class="fs-5">${response.message}</p>
                                 <p>New Outstanding Balance: INR ${parseFloat(response.outstandingBalance).toFixed(2)}</p>`
                            );
                            modalCloseButton.removeClass('btn-danger btn-primary').addClass('btn-primary'); // Ensure correct button color

                            // Update page elements
                            $('#amountDueDisplay').text('INR ' + parseFloat(response.amountDue).toFixed(2));
                             if(parseFloat(response.amountDue) > 0) {
                                $('#amountDueDisplay').removeClass('text-success').addClass('text-danger');
                            } else {
                                $('#amountDueDisplay').removeClass('text-danger').addClass('text-success');
                            }
                            $('#dueDateDisplay').text(response.nextDueDate ? new Date(response.nextDueDate).toLocaleDateString('en-IN', { year: 'numeric', month: 'long', day: 'numeric' }) : "N/A");
                            $('#outstandingBalanceDisplay').text('INR ' + parseFloat(response.outstandingBalance).toFixed(2));

                            $('#loanShortDescription').find('span').text(response.loanStatus)
                                .removeClass('text-danger text-info text-success')
                                .addClass(response.loanStatus === "Overdue" ? "text-danger" : (response.loanStatus === "Closed" ? "text-success" : "text-info"));


                            if (response.loanStatus === "Closed" || response.outstandingBalance <= 0) {
                                paymentForm.hide();
                                $('#paymentSuccessPageMessage').addClass('d-none'); // Hide if shown before
                                $('#noPaymentDuePageMessage').html('<i class="fas fa-info-circle me-2"></i>No payment is due as this loan is fully paid and closed.').removeClass('d-none');
                                $('#paymentPageSubtitle').text(`This loan (${$('#loanProductName').text()}) is closed.`);
                            } else {
                                $('#paymentSuccessPageMessage').removeClass('d-none');
                                // Update paymentAmount input to new amount due or a default
                                $('#paymentAmount').val(parseFloat(response.amountDue > 0 ? response.amountDue : "100.00").toFixed(2));
                            }
                             // Reset form and button for potential next attempt if not closed
                            if (response.loanStatus !== "Closed") {
                                paymentForm[0].reset(); // Reset form fields
                                $('#termsAndConditions').prop('checked', false); // Uncheck terms
                                proceedButton.prop('disabled', false).removeClass('d-none');
                                processingLoader.addClass('d-none');
                            }


                        } else {
                            modalHeader.removeClass('bg-primary').addClass('bg-danger text-white');
                            modalLabel.text('Payment Failed');
                            modalResultDiv.html(
                                `<div class="text-danger"><i class="fas fa-times-circle status-icon"></i></div>
                                 <p class="fs-5">Your payment could not be processed.</p>
                                 <p>Reason: ${response.message}</p>`
                            );
                             modalCloseButton.removeClass('btn-primary btn-success').addClass('btn-danger');
                             // Re-enable form for another attempt
                            proceedButton.prop('disabled', false).removeClass('d-none');
                            processingLoader.addClass('d-none');
                        }
                    },
                    error: function (xhr, status, error) {
                        modalSpinner.addClass('d-none');
                        modalResultDiv.removeClass('d-none');
                        modalFooter.removeClass('d-none');

                        modalHeader.removeClass('bg-primary').addClass('bg-danger text-white');
                        modalLabel.text('Payment Error');
                        modalResultDiv.html(
                            `<div class="text-danger"><i class="fas fa-exclamation-triangle status-icon"></i></div>
                             <p class="fs-5">An unexpected error occurred.</p>
                             <p>Please try again later or contact support.</p>
                             <p class="small text-muted">Error: ${xhr.status} ${error}</p>`
                        );
                        modalCloseButton.removeClass('btn-primary btn-success').addClass('btn-danger');
                        // Re-enable form for another attempt
                        proceedButton.prop('disabled', false).removeClass('d-none');
                        processingLoader.addClass('d-none');
                    }
                });
            });

            // Reset validation on input/change
            $('#paymentForm input, #paymentForm select').on('input change', function () {
                $(this).removeClass('is-invalid');
                if ($(this).closest('form').hasClass('was-validated')) {
                    // If main form was validated, recheck validity silently on field change
                    if (!$(this).closest('form')[0].checkValidity()) {
                        // If this field made it invalid, mark it (optional)
                    } else {
                         // Check if all fields are now valid to remove global 'was-validated'
                        if ($(this).closest('form')[0].checkValidity()) {
                           // $(this).closest('form').removeClass('was-validated');
                        }
                    }
                }
            });

             // Handle modal close event to potentially reload page or update further
            statusModalElement.addEventListener('hidden.bs.modal', function () {
                // If payment was successful and loan is now closed, might redirect
                // if ($('#loanShortDescription').find('span').text() === "Closed") {
                //    // window.location.reload(); // or redirect to a summary page
                // }
                // Ensure the button and loader under it are reset if modal closed prematurely
                if (!proceedButton.is(':visible')) {
                     proceedButton.prop('disabled', false).removeClass('d-none');
                     processingLoader.addClass('d-none');
                }
            });

        });
    </script>
</body>
</html>