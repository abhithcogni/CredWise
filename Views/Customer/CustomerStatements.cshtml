@*
    CustomerStatement.cshtml
    This view expects a CustomerStatementViewModel object from the controller.
*@
@model CredWise_Trail.Models.ViewModels.CustomerStatementViewModel

@{
    ViewData["Title"] = "Customer Report & Statement";
    // Layout = "~/Views/Shared/_YourCustomerLayout.cshtml"; // Optional: Set your layout page

    // Helper function to determine badge class based on Loan Approval Status
    Func<string, string> GetLoanApprovalBadgeClass = (status) =>
    {
        if (string.IsNullOrEmpty(status)) return "badge-secondary"; // Default for null or empty
        return status.ToUpper() switch
        {
            "APPROVED" => "badge-custom-approved",
            "PENDING" => "badge-custom-pending",
            "REJECTED" => "badge-custom-rejected",
            _ => "badge-secondary" // Default for any other statuses
        };
    };

    // Helper function to determine badge class based on Loan Overall Status (Active, Overdue, Closed)
    Func<string, string> GetLoanOverallStatusBadgeClass = (status) =>
    {
        if (string.IsNullOrEmpty(status)) return "badge-secondary"; // Default for null or empty
        return status.ToUpper() switch
        {
            "ACTIVE" => "badge-custom-active",
            "OVERDUE" => "badge-custom-overdue",
            "CLOSED" => "badge-secondary", // Reusing completed style for closed loans
            "PENDING" => "badge-custom-pending", // If LoanStatus can also be pending before disbursement
            _ => "badge-secondary"
        };
    };


    // Helper function to determine badge class based on Repayment Status
    Func<string, string> GetRepaymentBadgeClass = (status) =>
    {
        if (string.IsNullOrEmpty(status)) return "badge-custom-pending"; // Default for null or empty
        return status.ToUpper() switch
        {
            "COMPLETED" => "badge-custom-completed",
            "SUCCESS" => "badge-custom-completed",   // If "SUCCESS" is used for completed
            "PENDING" => "badge-custom-pending",
            "FAILED" => "badge-custom-rejected",      // Assuming 'failed' maps to rejected style
            _ => "badge-secondary" // Default for any other statuses
        };
    };

    // Determine the identifier of the first loan to show by default
    var firstLoanIdentifierToShow = Model?.LoanStatements?.FirstOrDefault()?.UniqueLoanIdentifier;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #333;
            background-color: #f8f9fa; /* Light background */
        }
        /* Custom colors for the theme */
        .primary-color {
            color: #0A2463; /* Dark blue for primary elements */
        }

        .secondary-color {
            color: #3E92CC; /* Lighter blue for secondary elements */
        }
        /* Custom background colors */
        .bg-primary-custom {
            background-color: #0A2463 !important;
            color: white; /* White text on dark blue background */
        }

        .bg-secondary-custom {
            background-color: #3E92CC !important;
            color: white; /* White text on lighter blue background */
        }
        /* Custom button styles */
        .btn-primary-custom {
            background-color: #0A2463;
            border-color: #0A2463;
            color: white;
            transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth transition */
        }

            .btn-primary-custom:hover {
                background-color: #081f53; /* Darker shade on hover */
                border-color: #081f53;
                color: white;
                transform: translateY(-2px); /* Lift button on hover */
            }

        .btn-secondary-custom {
            background-color: #3E92CC;
            border-color: #3E92CC;
            color: white;
            transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth transition */
        }

            .btn-secondary-custom:hover {
                background-color: #3279a8; /* Darker shade on hover */
                border-color: #3279a8;
                color: white;
                transform: translateY(-2px); /* Lift button on hover */
            }
        /* Styling for the main page header */
        .page-header {
            border-bottom: 2px solid #0A2463; /* A strong bottom border */
            padding-bottom: 15px;
            margin-bottom: 30px;
            display: flex;
            align-items: center;
            justify-content: space-between; /* Space out title and button */
        }

            .page-header .icon {
                font-size: 2.2rem; /* Larger icon for the header */
                margin-right: 15px;
                color: #0A2463;
            }

            .page-header h1 {
                font-weight: 600; /* Bolder title */
            }

        /* Styling for section headers within the content */
        .section-header {
            border-bottom: 1px solid #3E92CC; /* A subtle bottom border */
            padding-bottom: 8px;
            margin-bottom: 25px;
            color: #0A2463; /* Primary color for section titles */
            font-weight: 500;
            display: flex;
            align-items: center;
        }

            .section-header .icon {
                margin-right: 10px;
                color: #3E92CC; /* Secondary color for section icons */
            }
        /* Custom card styling with a left border highlight */
        .card-custom {
            border-left: 5px solid #0A2463; /* Primary color border on the left */
            margin-bottom: 25px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.08); /* Soft shadow */
            transition: transform 0.3s ease, box-shadow 0.3s ease; /* Smooth hover effect */
        }

            .card-custom:hover {
                transform: translateY(-3px); /* Lift card slightly on hover */
                box-shadow: 0 6px 12px rgba(0,0,0,0.12); /* Enhanced shadow on hover */
            }

        .card-header.bg-secondary-custom {
            border-bottom: none; /* Remove default card header border */
            border-radius: .25rem .25rem 0 0; /* Match card border-radius */
        }

        /* Table header styling */
        .table th {
            background-color: #e9ecef; /* Slightly darker grey for table headers */
            color: #0A2463; /* Primary color text for table headers */
            font-weight: 600;
        }

        .table-hover tbody tr:hover {
            background-color: #e2f0ff; /* Light blue on row hover */
            transition: background-color 0.2s ease;
        }

        /* Custom badge styles for different statuses */
        .badge-custom-pending {
            background-color: #ffc107; /* Yellow for pending status */
            color: #333; /* Dark text for yellow badge */
            padding: 0.4em 0.6em;
            border-radius: 0.3rem;
        }

        .badge-custom-verified, .badge-custom-approved, .badge-custom-completed, .badge-custom-active {
            background-color: #28a745; /* Green for verified/approved/completed/active */
            color: white;
            padding: 0.4em 0.6em;
            border-radius: 0.3rem;
        }

        .badge-custom-rejected, .badge-custom-overdue { /* Also used for FAILED repayments */
            background-color: #dc3545; /* Red for rejected/overdue status */
            color: white;
            padding: 0.4em 0.6em;
            border-radius: 0.3rem;
        }

        .badge-secondary { /* Default/unknown status */
            background-color: #6c757d;
            color: white;
            padding: 0.4em 0.6em;
            border-radius: 0.3rem;
        }
        /* Styling for individual summary items */
        .summary-item {
            margin-bottom: 12px;
            font-size: 0.95rem;
        }

        .summary-label {
            font-weight: bold;
            color: #0A2463; /* Bold primary color for labels */
            margin-right: 5px;
        }
        /* Footer styling */
        

        /* Animated content entry */
        .statement-content {
            opacity: 0; /* Start hidden */
            transform: translateY(20px); /* Start slightly below */
            transition: opacity 0.5s ease-out, transform 0.5s ease-out; /* Smooth transition */
        }

            .statement-content.show {
                opacity: 1; /* Fade in */
                transform: translateY(0); /* Move to original position */
            }

        /* Print-specific styles */
        @@media print {
            .no-print {
                display: none !important;
            }

            body {
                font-size: 10pt; /* Adjust print font size */
                color: #000; /* Ensure text is black for printing */
                background-color: #fff; /* White background for print */
            }

            .card-custom {
                border-left: none;
                box-shadow: none;
                page-break-inside: avoid;
                border: 1px solid #eee; /* Light border for cards in print */
            }

            .table th, .table td {
                border: 1px solid #dee2e6 !important; /* Ensure table borders are visible */
            }

            .table th {
                background-color: #f2f2f2 !important; /* Ensure background for TH */
                -webkit-print-color-adjust: exact; /* For Chrome/Safari */
                print-color-adjust: exact; /* Standard */
            }

            .page-header, .section-header {
                border-bottom: none;
                margin-bottom: 15px; /* Adjust spacing for print */
            }

            .container {
                margin-top: 0;
                padding: 0;
            }

            hr {
                display: none;
            }

            .badge { /* Basic badge styling for print */
                border: 1px solid #ccc;
                padding: .25em .4em;
                color: #000 !important; /* Override badge text color for print */
                background-color: transparent !important; /* No background for badges */
            }

            .statement-content {
                opacity: 1; /* Ensure visible when printing */
                transform: none; /* No transforms when printing */
            }
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        @if (Model == null)
        {
            <div class="alert alert-danger text-center" role="alert">
                <strong>Critical Error:</strong> The statement data model was not properly provided to the view. Please contact support or try again later.
            </div>
        }
        else if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="alert alert-warning text-center" role="alert">
                @Model.ErrorMessage
            </div>
        }
        else // Model is valid and has no explicit error message
        {
            <div class="page-header d-flex align-items-center">
                <div class="d-flex align-items-center">
                    <i class="fas fa-file-invoice-dollar primary-color icon"></i>
                    <h1 class="primary-color mb-0">Customer Report & Statement</h1>
                </div>
                <button id="printStatementBtn" class="btn btn-primary-custom no-print"><i class="fas fa-print"></i> Print Statement</button>
            </div>
            <hr class="no-print">

            <section id="loanSummary" class="mb-5">
                <h4 class="section-header"><i class="fas fa-landmark icon"></i>Loan Overview</h4>
                <div class="row">
                    <div class="col-md-4">
                        <div class="card text-center bg-light mb-3 card-custom">
                            <div class="card-body">
                                <h5 class="card-title primary-color">Total Active Loans</h5>
                                <p class="card-text display-4 primary-color" id="totalActiveLoans">@Model.TotalActiveLoans</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card text-center bg-light mb-3 card-custom">
                            <div class="card-body">
                                <h5 class="card-title primary-color">Total Amount Disbursed</h5>
                                <p class="card-text display-4 primary-color" id="totalDisbursed">₹@Model.TotalAmountDisbursed.ToString("N2")</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card text-center bg-light mb-3 card-custom">
                            <div class="card-body">
                                <h5 class="card-title primary-color">Total Outstanding</h5>
                                <p class="card-text display-4 secondary-color" id="totalOutstanding">₹@Model.TotalOutstandingAmount.ToString("N2")</p>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <hr>

            @if (Model.LoanStatements != null && Model.LoanStatements.Any())
            {
                <section id="loanStatement" class="mb-5">
                    <h4 class="section-header"><i class="fas fa-list-alt icon"></i>Loan Account Statement</h4>

                    <div class="form-group no-print mb-4">
                        <label for="loanAccountSelect" class="summary-label">Select Loan Account to View Statement:</label>
                        <select class="form-control" id="loanAccountSelect">
                            @foreach (var loanOption in Model.LoanAccountsForSelection)
                            {
                                <option value="@loanOption.LoanIdValue" selected="@(loanOption.LoanIdValue == firstLoanIdentifierToShow ? "selected" : null)">
                                    @loanOption.LoanDisplayText
                                </option>
                            }
                        </select>
                    </div>

                    @foreach (var statement in Model.LoanStatements)
                    {
                        <div id="statementDetails@(statement.UniqueLoanIdentifier)" class="statement-content @(statement.UniqueLoanIdentifier == firstLoanIdentifierToShow ? "show" : "")">
                            <div class="card card-custom">
                                <div class="card-header bg-secondary-custom">
                                    <h5 class="mb-0">@statement.ProductName Details (@statement.ApplicationIdDisplay)</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row mb-3">
                                        <div class="col-md-4 summary-item"><span class="summary-label">Application ID:</span> @statement.ApplicationIdDisplay</div>
                                        <div class="col-md-4 summary-item"><span class="summary-label">Product:</span> @statement.ProductName</div>
                                        <div class="col-md-4 summary-item"><span class="summary-label">Loan Amount:</span> ₹@statement.LoanAmount.ToString("N2")</div>
                                        <div class="col-md-4 summary-item"><span class="summary-label">Interest Rate:</span> @statement.InterestRate.ToString("0.##")%</div>
                                        <div class="col-md-4 summary-item"><span class="summary-label">Tenure:</span> @statement.TenureMonths Months</div>
                                        <div class="col-md-4 summary-item"><span class="summary-label">Application Date:</span> @statement.ApplicationDate.ToString("yyyy-MM-dd")</div>
                                        <div class="col-md-4 summary-item">
                                            <span class="summary-label">Application Status:</span>
                                            <span class="badge @GetLoanApprovalBadgeClass(statement.ApprovalStatus)">@(statement.ApprovalStatus?.ToUpper())</span>
                                        </div>
                                        <div class="col-md-4 summary-item">
                                            <span class="summary-label">Loan Status:</span>
                                            <span class="badge @GetLoanOverallStatusBadgeClass(statement.LoanStatus)">@(statement.LoanStatus?.ToUpper())</span>
                                        </div>
                                        <div class="col-md-4 summary-item"><span class="summary-label">Outstanding Balance:</span> ₹@statement.OutstandingBalance.ToString("N2")</div>
                                    </div>

                                    <h5 class="section-header mt-4"><i class="fas fa-history icon"></i>Scheduled Installments</h5>
                                    @if (statement.RepaymentHistory != null && statement.RepaymentHistory.Any())
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-hover table-striped table-sm">
                                                <thead class="thead-light">
                                                    <tr>
                                                        <th>Repayment ID</th>
                                                        <th>Due Date</th>
                                                        <th>Amount Due</th>
                                                        <th>Payment Date</th>
                                                        <th>Status</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var repayment in statement.RepaymentHistory)
                                                    {
                                                        <tr>
                                                            <td>REP@(repayment.RepaymentId.ToString("D3"))</td>
                                                            <td>@repayment.DueDate.ToString("yyyy-MM-dd")</td>
                                                            <td>₹@repayment.AmountDue.ToString("N2")</td>
                                                            <td>@(repayment.PaymentDate.HasValue ? repayment.PaymentDate.Value.ToString("yyyy-MM-dd") : "-")</td>
                                                            <td>
                                                                <span class="badge @GetRepaymentBadgeClass(repayment.PaymentStatus)">@(repayment.PaymentStatus?.ToUpper())</span>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-muted">No installments scheduled or recorded for this loan yet.</p>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </section>
            }
            else // No loan statements to display for this customer
            {
                <hr>
                <div class="alert alert-info text-center py-4" role="alert">
                    <i class="fas fa-info-circle fa-2x mb-3"></i>
                    <h4>No loan accounts are currently available to display for @Model.CustomerName.</h4>
                    <p>Apply for a new loan to see your statement here!</p>
                </div>
            }
        }
    </div>

   

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        $(document).ready(function () {
            $('#printStatementBtn').on('click', function () {
                window.print();
            });

            $('#loanAccountSelect').on('change', function () {
                var selectedLoanId = $(this).val();

                // Hide all statement content divs and remove 'show' class
                $('.statement-content').removeClass('show').hide();

                // Show the selected one with animation
                var $selectedDiv = $('#statementDetails' + selectedLoanId);
                $selectedDiv.fadeIn(400, function() { // Fade in over 400ms
                    $(this).addClass('show'); // Add 'show' class after fade-in is complete for the translateY effect
                });
            });

            // If there's an initial selected loan (first one by default), ensure it has the 'show' class for animation
            var initialSelectedLoan = $('#loanAccountSelect').val();
            if (initialSelectedLoan) {
                $('#statementDetails' + initialSelectedLoan).addClass('show');
            } else {
                // If no specific loan is selected (e.g., if LoanAccountsForSelection is empty),
                // ensure no statement-content is accidentally shown and clear any 'show' classes.
                $('.statement-content').removeClass('show').hide();
            }
        });
    </script>
</body>
</html>