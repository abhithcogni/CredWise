@* @model CredWise_Trail.Models.LoanApplication *@
@{
    // --- This block retrieves data passed from the Controller (ViewData/ViewBag) ---
    // --- and sets up variables to control the view's logic and display.      ---
    ViewData["Title"] = "Apply for Loan";
    var loanProducts = ViewBag.LoanProducts as List<CredWise_Trail.Models.LoanProduct>;
    bool showLoanForm = (bool?)ViewData["ShowLoanForm"] ?? false;
    string kycPageLink = ViewData["KycPageLink"] as string;
    string kycPageLinkText = ViewData["KycPageLinkText"] as string;
    string kycStatus = ViewData["KycStatus"] as string;
    string kycStatusClass = "";
    if (!string.IsNullOrEmpty(kycStatus))
    {
        switch (kycStatus.ToLower())
        {
            case "pending":
                kycStatusClass = "text-warning";
                break;
            case "rejected":
                kycStatusClass = "text-danger";
                break;
            case "not submitted":
                kycStatusClass = "text-secondary";
                break;
            default:
                kycStatusClass = "text-info";
                break;
        }
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - MyBank</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        body {
            background-color: #f0f2f5;
            margin: 0;
        }

        .card-form-container {
            border: 1px solid #e9ecef;
            border-radius: 0.75rem;
            box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, .04);
            background-color: #ffffff;
            max-width: 700px;
            width: 100%;
            margin: 2rem auto;
        }

            .card-form-container .card-header {
                background-color: #f8f9fa;
                border-bottom: 1px solid #e9ecef;
                font-weight: 600;
                color: #343a40;
                font-size: 1.25rem;
                padding: 1rem 1.5rem;
                text-align: center;
            }

            .card-form-container .card-body {
                padding: 1.5rem;
            }

        .btn-primary {
            background-color: #3E92CC;
            padding: 0.5rem 1.5rem;
            font-weight: 500;
            border: none;
        }

            .btn-primary:hover {
                background-color: #0A2463;
                border-color: white;
            }

        .btn-info {
            background-color: #17a2b8;
            border-color: #17a2b8;
            color: white;
        }

            .btn-info:hover {
                background-color: #138496;
                border-color: #117a8b;
            }

        .input-group-text {
            background-color: #e9ecef;
            border-right: none;
            color: #495057;
        }

        .form-control.no-left-border {
            border-left: none;
        }

        .validation-message {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
        }

        .alert {
            width: 100%;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="card-form-container shadow">
        <div class="card-header">
            <i class="fas fa-file-alt"></i> Apply for a Loan
        </div>
        <div class="card-body">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">@TempData["SuccessMessage"]</div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
            }
            @if (TempData["WarningMessage"] != null)
            {
                <div class="alert alert-warning">@TempData["WarningMessage"]</div>
            }
            @if (TempData["InfoMessage"] != null)
            {
                <div class="alert alert-info">@TempData["InfoMessage"]</div>
            }

            @* This is the main logical switch. If true, the loan form is rendered. If false, the KYC status/guidance is shown instead. *@
            @if (showLoanForm)
            {
                <form id="loanApplicationForm" asp-action="ApplyForLoan" asp-controller="Customer" method="post">
                    @Html.AntiForgeryToken()

                    <div class="mb-3">
                        <label for="loanProductName" class="form-label"><i class="fas fa-piggy-bank me-2 text-secondary"></i>Loan Product Name:</label>
                        <select class="form-select" id="loanProductName" name="loanProductId" required>
                            <option value="" disabled selected>Select a loan product</option>
                            @if (loanProducts != null)
                            {
                                foreach (var product in loanProducts)
                                {
                                    <option value="@product.LoanProductId"
                                    @* These data-* attributes embed loan product details directly into the HTML, making them easily accessible to our client-side JavaScript. *@
                                            data-interest-rate="@product.InterestRate"
                                            data-min-amount="@product.MinAmount"
                                            data-max-amount="@product.MaxAmount"
                                            data-max-tenure="@product.Tenure">
                                        @product.ProductName
                                    </option>
                                }
                            }
                            else
                            {
                                <option value="" disabled>No loan products available at this moment.</option>
                            }
                        </select>
                        @Html.ValidationMessage("loanProductId", new { @class = "validation-message" })
                    </div>

                    <div class="mb-3">
                        <label for="interestRate" class="form-label"><i class="fas fa-percentage me-2 text-secondary"></i>Interest Rate (%):</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-percent"></i></span>
                            <input type="number" class="form-control no-left-border" id="interestRate" name="interestRate" disabled readonly>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="loanAmount" class="form-label"><i class="bi bi-currency-rupee me-2 text-secondary"></i>Loan Amount:</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-coins"></i></span>
                            <input type="number" class="form-control no-left-border" id="loanAmount" name="loanAmount" required placeholder="Enter desired loan amount" step="any" min="1">
                        </div>
                        <div id="loanAmountValidation" class="validation-message"></div>
                        @Html.ValidationMessage("loanAmount", new { @class = "validation-message" })
                    </div>

                    <div class="mb-3">
                        <label for="tenure" class="form-label"><i class="far fa-calendar-alt me-2 text-secondary"></i>Tenure (months):</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-hourglass-half"></i></span>
                            <input type="number" class="form-control no-left-border" id="tenure" name="tenure" required placeholder="Enter tenure in months" min="1">
                        </div>
                        <div id="tenureValidation" class="validation-message"></div>
                        @Html.ValidationMessage("tenure", new { @class = "validation-message" })
                    </div>

                    <div class="mb-3">
                        <label for="monthlyEmi" class="form-label">
                            <i class=" bi bi-currency-rupee me-2 text-secondary">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-currency-rupee text-secondary">
                                    " viewBox="0 0 16 16">
                                    <path d="M4 3.06h2.726c1.22 0 2.12.575 2.325 1.724H4v1.051h5.051C8.855 7.001 8 7.558 6.788 7.558H4v1.317L8.437 14h2.11L6.095 8.884h.855c2.316-.018 3.465-1.476 3.688-3.049H12V4.784h-1.345c-.08-.778-.357-1.335-.793-1.732H12V2H4z" />
                                </svg>
                            </i>Monthly EMI:
                        </label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-wallet"></i></span>
                            <input type="text" class="form-control no-left-border" id="monthlyEmi" disabled readonly>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="totalAmount" class="form-label"><i class="fas fa-calculator me-2 text-secondary"></i>Approx. Total Repayment:</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-equals"></i></span>
                            <input type="text" class="form-control no-left-border" id="totalAmount" name="totalAmount" disabled readonly>
                        </div>
                    </div>

                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger mt-3" role="alert">
                            <strong>Please correct the following errors:</strong>
                            <ul class="mb-0">
                                @foreach (var modelError in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                {
                                    <li>@modelError.ErrorMessage</li>
                                }
                            </ul>
                        </div>
                    }

                    <div class="text-center">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-paper-plane pe-2"></i>Submit Application
                        </button>
                    </div>
                </form>
            }
            else
            {
                @if (!string.IsNullOrEmpty(kycPageLink) && !string.IsNullOrEmpty(kycPageLinkText))
                {
                    <div class="text-center mt-3">
                        @if (!string.IsNullOrEmpty(kycStatus))
                        {
                            <p>Your KYC status: <strong class="@kycStatusClass">@kycStatus</strong></p>
                        }
                        <a href="@kycPageLink" class="btn btn-primary btn-lg">
                            <i class="fas fa-user-shield me-2"></i>@kycPageLinkText
                        </a>
                    </div>
                }
                else if (TempData["ErrorMessage"] == null && TempData["WarningMessage"] == null && TempData["InfoMessage"] == null)
                {
                    <div class="alert alert-info mt-3">Please ensure your KYC is completed and approved to apply for a loan. Contact support if you believe this is an error.</div>
                }
            }
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const loanProductNameSelect = document.getElementById("loanProductName");
            const interestRateInput = document.getElementById("interestRate");
            const loanAmountInput = document.getElementById("loanAmount");
            const tenureInput = document.getElementById("tenure");
            const totalAmountInput = document.getElementById("totalAmount");
            const monthlyEmiInput = document.getElementById("monthlyEmi");
            const loanAmountValidationDiv = document.getElementById("loanAmountValidation");
            const tenureValidationDiv = document.getElementById("tenureValidation");
            const loanApplicationForm = document.getElementById("loanApplicationForm");


            let currentMinAmount = 0;
            let currentMaxAmount = Infinity;
            let currentMaxTenure = Infinity;

            function formatCurrency(value) {
                return new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR', minimumFractionDigits: 0, maximumFractionDigits: 2 }).format(value);
            }

            function updateLoanProductLimits() {
                if (!loanProductNameSelect) return;
                const selectedOption = loanProductNameSelect.options[loanProductNameSelect.selectedIndex];

                if (selectedOption && selectedOption.value !== "") {
                    interestRateInput.value = (parseFloat(selectedOption.dataset.interestRate) || 0).toFixed(2);
                    currentMinAmount = parseFloat(selectedOption.dataset.minAmount) || 0;
                    currentMaxAmount = parseFloat(selectedOption.dataset.maxAmount) || Infinity;
                    currentMaxTenure = parseInt(selectedOption.dataset.maxTenure) || Infinity;

                    loanAmountInput.min = currentMinAmount;
                    loanAmountInput.max = currentMaxAmount === Infinity ? "" : currentMaxAmount;
                    tenureInput.max = currentMaxTenure === Infinity ? "" : currentMaxTenure;

                    validateLoanAmount();
                    validateTenure();
                } else {
                    if(interestRateInput) interestRateInput.value = "";
                    currentMinAmount = 0;
                    currentMaxAmount = Infinity;
                    currentMaxTenure = Infinity;
                    if(loanAmountInput) {
                        loanAmountInput.min = 1;
                        loanAmountInput.max = "";
                    }
                    if(tenureInput) tenureInput.max = "";
                    if(loanAmountValidationDiv) loanAmountValidationDiv.textContent = "";
                    if(tenureValidationDiv) tenureValidationDiv.textContent = "";
                }
                calculateLoanDetails();
            }

            function validateLoanAmount() {
                if (!loanAmountInput || !loanAmountValidationDiv) return;
                const amount = parseFloat(loanAmountInput.value);
                loanAmountValidationDiv.textContent = "";

                if (isNaN(amount) || amount <= 0 && loanAmountInput.value !== "") {
                    loanAmountValidationDiv.textContent = "Loan amount must be a positive number.";
                } else if (currentMinAmount > 0 && amount < currentMinAmount) {
                    loanAmountValidationDiv.textContent = `Min. amount is ${formatCurrency(currentMinAmount)}.`;
                } else if (currentMaxAmount !== Infinity && amount > currentMaxAmount) {
                    loanAmountValidationDiv.textContent = `Max. amount is ${formatCurrency(currentMaxAmount)}.`;
                }
            }

            function validateTenure() {
                if (!tenureInput || !tenureValidationDiv) return;
                const tenure = parseInt(tenureInput.value);
                tenureValidationDiv.textContent = "";

                if (isNaN(tenure) || tenure <= 0 && tenureInput.value !== "") {
                    tenureValidationDiv.textContent = "Tenure must be a positive whole number.";
                } else if (currentMaxTenure !== Infinity && tenure > currentMaxTenure) {
                    tenureValidationDiv.textContent = `Max. tenure is ${currentMaxTenure} months.`;
                }
            }

            function calculateLoanDetails() {
                if (!loanAmountInput || !interestRateInput || !tenureInput || !totalAmountInput || !monthlyEmiInput) return;
                const principal = parseFloat(loanAmountInput.value) || 0;
                const annualRate = parseFloat(interestRateInput.value) || 0;
                const tenureMonths = parseInt(tenureInput.value) || 0;

                let totalRepayment = 0;
                let monthlyEmi = 0;

                if (principal > 0 && annualRate >= 0 && tenureMonths > 0) {
                    const monthlyRate = (annualRate / 100) / 12;

                    if (monthlyRate > 0) {
                        // Standard EMI Formula: P * r * (1+r)^n / ((1+r)^n - 1)
                        monthlyEmi = principal * monthlyRate * Math.pow(1 + monthlyRate, tenureMonths) / (Math.pow(1 + monthlyRate, tenureMonths) - 1);
                        totalRepayment = monthlyEmi * tenureMonths;
                    } else {
                        monthlyEmi = principal / tenureMonths;
                        totalRepayment = principal;
                    }
                }

                monthlyEmiInput.value = monthlyEmi > 0 ? formatCurrency(monthlyEmi) : "";
                totalAmountInput.value = totalRepayment > 0 ? formatCurrency(totalRepayment) : "";
            }

            if (loanProductNameSelect) {
                loanProductNameSelect.addEventListener("change", updateLoanProductLimits);
            }
            if (loanAmountInput) {
                loanAmountInput.addEventListener("input", function() {
                    validateLoanAmount();
                    calculateLoanDetails();
                });
            }
            if (tenureInput) {
                tenureInput.addEventListener("input", function() {
                    validateTenure();
                    calculateLoanDetails();
                });
            }

            if (showLoanForm) {
                updateLoanProductLimits();
            }

            if (loanApplicationForm) {
                loanApplicationForm.addEventListener("submit", function(event) {
                    updateLoanProductLimits();
                    validateLoanAmount();
                    validateTenure();

                    let clientSideValid = true;
                    if (loanAmountValidationDiv && loanAmountValidationDiv.textContent !== "") {
                        clientSideValid = false;
                    }
                    if (tenureValidationDiv && tenureValidationDiv.textContent !== "") {
                        clientSideValid = false;
                    }
                    if (!loanApplicationForm.checkValidity()) {
                        clientSideValid = false;
                    }


                    if (!clientSideValid) {
                        // Stop the form from submitting to the server if client-side validation fails.
                        event.preventDefault();
                        alert("Please correct the highlighted errors and ensure all required fields are filled before submitting.");
                    }
                });
            }
        });
    </script>
</body>
</html>