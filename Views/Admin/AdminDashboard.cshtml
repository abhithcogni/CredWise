@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model CredWise_Trail.Models.ViewModels.AdminDashboardViewModel // Declare the model type for the view

@{
    Layout = "~/Views/Shared/AdminUtility.cshtml";
    // This line tells Razor that this view expects an AdminDashboardViewModel object.
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Loan Management Dashboard</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa;
        }

        /* Custom Colors */
        .text-primary-custom {
            color: #0A2463 !important;
        }

        .bg-primary-custom {
            background-color: #0A2463 !important;
        }

        .btn-outline-primary-custom {
            color: #0A2463;
            border-color: #0A2463;
        }

            .btn-outline-primary-custom:hover {
                background-color: #0A2463;
                color: #fff;
                border-color: #0A2463;
            }

        .text-secondary-custom {
            color: #3E92CC !important;
        }

        .bg-secondary-custom {
            background-color: #3E92CC !important;
        }

        .btn-outline-secondary-custom {
            color: #3E92CC;
            border-color: #3E92CC;
        }

            .btn-outline-secondary-custom:hover {
                background-color: #3E92CC;
                color: #fff;
                border-color: #3E92CC;
            }


        /* Card Styles */
        .card {
            border: none;
            border-radius: 0.5rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, .1);
            transition: transform 0.2s ease-in-out;
        }

            .card:hover {
                transform: translateY(-5px);
            }

        .card-icon {
            font-size: 2.5rem;
            opacity: 0.7;
        }

        .card-title-custom {
            font-size: 0.9rem;
            font-weight: 500;
            color: #6c757d;
            margin-bottom: 0.25rem;
        }

        .card-text-value {
            font-size: 1.75rem;
            font-weight: bold;
            color: #343a40;
        }

        /* Chart container */
        .chart-container {
            position: relative;
            height: 350px;
            width: 100%;
        }

        /* Table styles */
        .table th {
            font-weight: 600;
        }

        .table td, .table th {
            vertical-align: middle;
        }

        .table-hover tbody tr:hover {
            background-color: #e9ecef;
        }

        /* Status Badges */
        .badge.bg-success-subtle { /* For APPROVED */
            background-color: #d1e7dd !important;
            color: #0f5132 !important;
        }

        .badge.bg-warning-subtle { /* For PENDING */
            background-color: #fff3cd !important;
            color: #664d03 !important;
        }

        .badge.bg-danger-subtle { /* For REJECTED */
            background-color: #f8d7da !important;
            color: #58151c !important;
        }

        .badge.bg-info-subtle { /* For LoanStatus: PENDING_DISBURSEMENT */
            background-color: #cff4fc !important;
            color: #055160 !important;
        }

        .badge.bg-primary-subtle { /* For LoanStatus: CLOSED (Paid Off) */
            background-color: #cfe2ff !important;
            color: #084298 !important;
        }

        .badge.bg-secondary-subtle { /* For other/default LoanStatus */
            background-color: #e2e3e5 !important;
            color: #495057 !important;
        }
    </style>
</head>
<body>
    <div class="container-fluid p-4">
        <h1 class="h2 mb-4">Dashboard Overview</h1>

        <div class="row g-4 mb-4">
            <div class="col-lg-3 col-md-6">
                <div class="card h-100">
                    <div class="card-body d-flex align-items-center">
                        <div class="flex-shrink-0 text-primary-custom me-3">
                            <i class="fas fa-landmark card-icon"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="card-title-custom text-uppercase">Total Loan Value</div>
                            @* Displaying TotalLoanValue from the ViewModel, formatted as currency with no decimals *@
                            <div class="card-text-value">₹@Model.TotalLoanValue.ToString("N0")</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card h-100">
                    <div class="card-body d-flex align-items-center">
                        <div class="flex-shrink-0 text-success me-3">
                            <i class="fas fa-check-circle card-icon"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="card-title-custom text-uppercase">Active Loans</div>
                            @* Displaying ActiveLoansCount from the ViewModel *@
                            <div class="card-text-value">@Model.ActiveLoansCount</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card h-100">
                    <div class="card-body d-flex align-items-center">
                        <div class="flex-shrink-0 text-warning me-3">
                            <i class="fas fa-spinner card-icon"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="card-title-custom text-uppercase">Pending Applications</div>
                            @* Displaying PendingApplicationsCount from the ViewModel *@
                            <div class="card-text-value">@Model.PendingApplicationsCount</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card h-100">
                    <div class="card-body d-flex align-items-center">
                        <div class="flex-shrink-0 text-danger me-3">
                            <i class="fas fa-exclamation-triangle card-icon"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="card-title-custom text-uppercase">Overdue Loans</div>
                            @* Displaying OverdueLoansCount from the ViewModel *@
                            <div class="card-text-value">@Model.OverdueLoansCount</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4 mb-4">
            <div class="col-lg-7">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0"><i class="fas fa-chart-bar me-2"></i>Loan Performance (Monthly)</h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="loanPerformanceChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-5">
                <div class="card h-100">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0"><i class="fas fa-chart-pie me-2"></i>Loan Status Distribution</h5>
                    </div>
                    <div class="card-body">
                        <div class="chart-container" style="height: 300px;">
                            <canvas id="loanStatusChart"></canvas>
                        </div>
                        <div class="mt-3 text-center small">
                            <span class="me-2"><i class="fas fa-circle" style="color:#0A2463;"></i> Active</span>
                            <span class="me-2"><i class="fas fa-circle" style="color:#198754;"></i> Paid Off</span>
                            <span class="me-2"><i class="fas fa-circle" style="color:#ffc107;"></i> Pending Approval</span>
                            <span class="me-2"><i class="fas fa-circle" style="color:#0dcaf0;"></i> Pending Disbursement</span>
                            <span class="me-2"><i class="fas fa-circle" style="color:#dc3545;"></i> Overdue</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0"><i class="fas fa-list-alt me-2"></i>Recent Loan Applications</h5>
                        <a href="@Url.Action("LoanApproval","Admin")" class="btn btn-sm btn-outline-primary-custom">View All <i class="fas fa-arrow-right ms-1"></i></a>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover table-striped mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th scope="col">Loan No.</th>
                                        <th scope="col">Applicant Name</th>
                                        <th scope="col">Loan Type</th>
                                        <th scope="col">Amount</th>
                                        <th scope="col">Date Submitted</th>
                                        <th scope="col">Approval Status</th>
                                        <th scope="col">Loan Status</th>
                                        <th scope="col">Progress</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @* Loop through the RecentLoanApplications from the ViewModel *@
                                    @if (Model.RecentLoanApplications != null && Model.RecentLoanApplications.Any())
                                    {
                                        foreach (var application in Model.RecentLoanApplications)
                                        {
                                            <tr>
                                                <td>@application.LoanNumber</td> @* Displays the unique Loan Number *@
                                                <td>@application.Customer?.Name</td> @* Displays the customer's name, safely handling null Customer object *@
                                                <td>@application.LoanProduct?.ProductName</td> @* Displays the loan product name, safely handling null LoanProduct object *@
                                                <td>₹@application.LoanAmount.ToString("N0")</td> @* Displays the loan amount, formatted as currency *@
                                                <td>@application.ApplicationDate.ToString("yyyy-MM-dd")</td> @* Displays the application date in YYYY-MM-DD format *@
                                                <td>
                                                    @{
                                                        string approvalBadgeClass = "";
                                                        // Conditional logic to apply Bootstrap subtle badge classes based on ApprovalStatus.
                                                        if (application.ApprovalStatus == "APPROVED")
                                                        {
                                                            approvalBadgeClass = "bg-success-subtle"; // Soft green for approved
                                                        }
                                                        else if (application.ApprovalStatus == "PENDING")
                                                        {
                                                            approvalBadgeClass = "bg-warning-subtle"; // Soft yellow for pending
                                                        }
                                                        else if (application.ApprovalStatus == "REJECTED")
                                                        {
                                                            approvalBadgeClass = "bg-danger-subtle"; // Soft red for rejected
                                                        }
                                                        // Default to a neutral badge if status is unknown or not handled
                                                        else
                                                        {
                                                            approvalBadgeClass = "bg-secondary-subtle";
                                                        }
                                                    }
                                                    <span class="badge rounded-pill @approvalBadgeClass">@application.ApprovalStatus</span>
                                                </td>
                                                <td>
                                                    @{
                                                        string loanStatusBadgeClass = "";
                                                        // Conditional logic to apply Bootstrap subtle badge classes based on LoanStatus.
                                                        // These are distinct from ApprovalStatus as requested, providing different color meanings.
                                                        if (application.LoanStatus == "ACTIVE")
                                                        {
                                                            loanStatusBadgeClass = "bg-success-subtle";
                                                        }
                                                        else if (application.LoanStatus == "PENDING_DISBURSEMENT")
                                                        {
                                                            loanStatusBadgeClass = "bg-info-subtle"; // Bootstrap info blue for awaiting disbursement
                                                        }
                                                        else if (application.LoanStatus == "OVERDUE")
                                                        {
                                                            loanStatusBadgeClass = "bg-danger-subtle";
                                                        }
                                                        else if (application.LoanStatus == "CLOSED")
                                                        {
                                                            loanStatusBadgeClass = "bg-primary-subtle"; // Bootstrap primary blue for fully paid off/closed
                                                        }
                                                        else
                                                        {
                                                            loanStatusBadgeClass = "bg-secondary-subtle"; // Default for other states
                                                        }
                                                    }
                                                    <span class="badge rounded-pill @loanStatusBadgeClass">@application.LoanStatus</span>
                                                </td>
                                                <td>
                                                    @{
                                                        // Calculate progress percentage and assign appropriate Bootstrap progress bar class.
                                                        int progress = 0;
                                                        string progressBarClass = "";

                                                        if (application.LoanStatus == "ACTIVE")
                                                        {
                                                            // For active loans, calculate progress based on the proportion of loan amount repaid.
                                                            // If OutstandingBalance is known and reliable, calculate progress from that.
                                                            // Example: If 20% of the loan is repaid, progress is 20.
                                                            if (application.LoanAmount > 0 && application.OutstandingBalance >= 0 && application.OutstandingBalance <= application.LoanAmount)
                                                            {
                                                                progress = (int)Math.Round(((application.LoanAmount - application.OutstandingBalance) / application.LoanAmount) * 100);
                                                            }
                                                            else
                                                            {
                                                                progress = 50; // Generic progress for active but no specific repayment progress data available
                                                            }
                                                            progressBarClass = "bg-success"; // Green for active/repaying
                                                        }
                                                        else if (application.LoanStatus == "CLOSED")
                                                        {
                                                            progress = 100; // 100% for closed/fully repaid loans
                                                            progressBarClass = "bg-success";
                                                        }
                                                        else if (application.LoanStatus == "PENDING_DISBURSEMENT")
                                                        {
                                                            progress = 75; // Approved but not yet disbursed (high progress as approval is key)
                                                            progressBarClass = "bg-info"; // Info blue
                                                        }
                                                        else if (application.ApprovalStatus == "PENDING") // If application is still pending initial approval
                                                        {
                                                            progress = 25; // Application received, awaiting review/approval
                                                            progressBarClass = "bg-warning"; // Warning yellow
                                                        }
                                                        else if (application.LoanStatus == "OVERDUE")
                                                        {
                                                            progress = 80; // Indicates significant progress but now an issue
                                                            progressBarClass = "bg-danger"; // Danger red
                                                        }
                                                        else if (application.ApprovalStatus == "REJECTED")
                                                        {
                                                            progress = 0; // Rejected applications have 0 progress on loan lifecycle
                                                            progressBarClass = "bg-dark"; // Dark/grey for rejected
                                                        }
                                                        else
                                                        {
                                                            progress = 10; // Default for other undefined states
                                                            progressBarClass = "bg-secondary";
                                                        }
                                                    }
                                                    <div class="progress" style="height: 10px;">
                                                        <div class="progress-bar @progressBarClass" role="progressbar" style="width: @(progress)%;" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100"></div>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="8" class="text-center">No recent loan applications found.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

    <script>
        // Chart.js Setup for Loan Performance (Bar Chart)
        const loanPerformanceCtx = document.getElementById('loanPerformanceChart').getContext('2d');
        if (loanPerformanceCtx) {
            new Chart(loanPerformanceCtx, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MonthlyLabels)), // Dynamically pass labels from ViewModel
                    datasets: [{
                        label: 'New Loans (₹k)',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.NewLoansMonthlyData)), // Dynamically pass data from ViewModel
                        backgroundColor: '#0A2463', // Custom primary blue
                        borderColor: '#0A2463',
                        borderWidth: 1,
                        borderRadius: 5,
                        hoverBackgroundColor: '#0A2463',
                        barPercentage: 0.7,
                        categoryPercentage: 0.7
                    },
                    {
                        label: 'Repayments (₹k)',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.RepaymentsMonthlyData)), // Dynamically pass data from ViewModel
                        backgroundColor: '#198754', // Bootstrap success green
                        borderColor: '#198754',
                        borderWidth: 1,
                        borderRadius: 5,
                        hoverBackgroundColor: '#198754',
                        barPercentage: 0.7,
                        categoryPercentage: 0.7
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: '#e9ecef' // Light grid lines
                            },
                            ticks: {
                                callback: function(value) {
                                    return '₹' + value + 'k'; // Format Y-axis labels
                                }
                            }
                        },
                        x: {
                            grid: {
                                display: false // No X-axis grid lines
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top', // Legend at the top
                            labels: {
                                usePointStyle: true, // Use circular markers for legend items
                                pointStyle: 'circle'
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false, // Show tooltips for all elements at the same x-coordinate
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += '₹' + context.parsed.y + 'k'; // Format tooltip value
                                    }
                                    return label;
                                }
                            }
                        }
                    },
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                }
            });
        }

        // Chart.js Setup for Loan Status Distribution (Doughnut Chart)
        const loanStatusCtx = document.getElementById('loanStatusChart').getContext('2d');
        if (loanStatusCtx) {
            new Chart(loanStatusCtx, {
                type: 'doughnut',
                data: {
                    labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.LoanStatusLabels)), // Dynamically pass labels from ViewModel
                    datasets: [{
                        label: 'Loan Status',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.LoanStatusCounts)), // Dynamically pass data from ViewModel
                        backgroundColor: [
                            '#0A2463', // Active: Custom primary blue
                            '#198754', // Paid Off (Closed): Bootstrap success green
                            '#ffc107', // Pending Approval: Bootstrap warning yellow
                            '#0dcaf0', // Pending Disbursement: Bootstrap info blue
                            '#dc3545'  // Overdue: Bootstrap danger red
                        ],
                        borderColor: [
                            '#fff', '#fff', '#fff', '#fff', '#fff' // White borders between segments
                        ],
                        borderWidth: 2,
                        hoverOffset: 8 // Expand segment on hover
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%', // Inner radius of the doughnut
                    plugins: {
                        legend: {
                            display: false // Hide default legend as custom legend is provided below the chart
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed !== null) {
                                        label += context.parsed; // Display count in tooltip
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        }
    </script>
</body>
</html>