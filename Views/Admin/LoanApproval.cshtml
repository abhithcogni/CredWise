@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model IEnumerable<CredWise_Trail.Models.LoanApplication>
@{
    ViewData["Title"] = "Loan Approval";
    Layout = "~/Views/Shared/AdminUtility.cshtml"; // Ensure this path is correct for your layout
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - MyBank</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            margin: 0;
        }

        /* Adjust the layout styles based on your AdminUtility.cshtml */
        #wrapper {
            display: flex;
        }

        #page-content-wrapper {
            flex-grow: 1;
            padding: 1.5rem; /* Consistent padding */
        }

        /* Existing styles from your provided code */
        .card {
            border: 1px solid #e9ecef;
            border-radius: 0.75rem;
            box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, .04);
        }

        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            font-weight: 600;
            color: #343a40;
            padding: 1rem 1.5rem;
        }

        .card-body {
            padding: 0; /* Important for full-width table within card */
        }

        .table {
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .table thead th {
            background-color: #f8f9fa;
            color: #495057;
            font-weight: 600;
            border-bottom-width: 1px;
            border-top: none;
            text-align: center;
            vertical-align: middle;
        }

        .table tbody tr:last-child td {
            border-bottom: none;
        }

        .table td, .table th {
            vertical-align: middle;
            text-align: center;
            padding: 0.9rem 0.75rem;
        }

        .table-hover tbody tr:hover {
            background-color: #eef2f7;
        }

        .table-striped tbody tr:nth-of-type(odd) {
            background-color: rgba(0,0,0,.025);
        }

        .status-badge {
            padding: 0.5em 0.75em !important;
            font-size: 0.85rem;
            font-weight: 500;
            border-radius: 0.375rem;
        }

        .status-badge.bg-success-soft {
            background-color: #d1e7dd !important;
            color: #0f5132 !important;
        }

        .status-badge.bg-warning-soft {
            background-color: #fff3cd !important;
            color: #664d03 !important;
        }

        .status-badge.bg-danger-soft {
            background-color: #f8d7da !important;
            color: #58151c !important;
        }

        .status-badge.bg-secondary-soft {
            background-color: #e2e3e5 !important;
            color: #41464b !important;
        }

        .action-dropdown {
            min-width: 120px;
            font-size: 0.9rem;
        }

        #filterStatus {
            font-size: 0.9rem;
        }

        .modal-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }

        .modal-title {
            color: #343a40;
            font-weight: 600;
        }

        .modal-footer {
            background-color: #f8f9fa;
            border-top: 1px solid #dee2e6;
        }

        .modal-body {
            font-size: 1rem;
        }

        #email-to {
            color: #3E92CC;
            text-decoration: none;
        }

        #email-to:hover {
            color: #0A2463;
            text-decoration: underline;
        }

        .no-applications-message {
            text-align: center;
            padding: 2rem;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="d-flex" id="wrapper">
        @* Assuming AdminUtility.cshtml provides the sidebar content here *@

        <div id="page-content-wrapper">
            <div class="container-fluid p-4">
                <div class="page-header mb-4">
                    <h2 class="h3"><i class="fas fa-gavel me-2"></i>Loan Application Management</h2>
                    <p class="text-muted">Review and process pending loan applications.</p>
                </div>

                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span><i class="fas fa-list-ul me-2"></i>Loan Applications</span>
                        <div class="filter-section">
                            <label for="filterStatus" class="form-label me-2 visually-hidden">Filter by Status:</label>
                            <select id="filterStatus" class="form-select form-select-sm d-inline-block" style="width: 180px;">
                                <option value="All" selected>All Statuses</option>
                                <option value="Pending">Pending</option>
                                <option value="Approved">Approved</option>
                                <option value="Rejected">Rejected</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover table-striped mb-0">
                                <thead>
                                    <tr>
                                        <th>Loan ID</th>
                                        <th>Customer Name</th>
                                        <th>Email</th>
                                        <th>Loan Amount</th>
                                        <th>Loan Type</th>
                                        <th>Status</th> @* Status column moved before Action for better flow *@
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="loanTableBody">
                                    @if (Model != null && Model.Any())
                                    {
                                        foreach (var item in Model)
                                        {
                                            string statusClass = "";
                                            switch (item.ApprovalStatus)
                                            {
                                                case "Approved":
                                                    statusClass = "bg-success-soft";
                                                    break;
                                                case "Rejected":
                                                    statusClass = "bg-danger-soft";
                                                    break;
                                                case "Pending":
                                                default:
                                                    statusClass = "bg-warning-soft"; // Use warning for pending
                                                    break;
                                            }
                                            <tr data-loan-id="@item.ApplicationId" data-current-status="@item.ApprovalStatus">
                                                <td>@item.ApplicationId</td>
                                                <td>@(item.Customer?.Name) </td> @* Access customer name safely *@
                                                <td><a href="mailto:@(item.Customer?.Email)" title="Email @(item.Customer?.Name)" id="email-to">@(item.Customer?.Email)</a></td>
                                                <td>@item.LoanAmount.ToString("C")</td> @* Formats as currency based on culture *@
                                                <td>@(item.LoanProduct?.ProductName ?? "N/A")</td>
                                                <td><span class="status-badge @statusClass">@item.ApprovalStatus</span></td>
                                                <td>
                                                    <select class="form-select form-select-sm action-dropdown" aria-label="Loan action for @(item.Customer?.Name)">
                                                        <!option value="Pending" @(item.ApprovalStatus == "Pending" ? "selected" : "")>Set Pending</!option>
                                                        <!option value="Approved" @(item.ApprovalStatus == "Approved" ? "selected" : "")>Approve</!option>
                                                        <!option value="Rejected" @(item.ApprovalStatus == "Rejected" ? "selected" : "")>Reject</!option>
                                                    </select>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="7" class="no-applications-message">
                                                <i class="fas fa-info-circle me-2"></i>No loan applications found.
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="card-footer text-muted small" id="tableInfo">
                        @if (Model != null && Model.Any())
                        {
                            <span>Displaying all @Model.Count() loan applications.</span>
                        }
                        else
                        {
                            <span>No loan applications to display.</span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Confirmation Modal (already present in your code) *@
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel"><i class="fas fa-exclamation-triangle me-2 text-warning"></i>Confirm Action</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to <strong id="actionTypeStrong"></strong> this loan application?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="fas fa-times me-1"></i>Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmActionBtn"><i class="fas fa-check me-1"></i>Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <script>
        $(document).ready(function () {
            // Store original data from the server-rendered HTML for client-side filtering.
            // This is safer than relying on a separate JS array if data changes on server.
            const allLoanRows = $('#loanTableBody tr').toArray(); // Convert jQuery object to plain array

            let selectedRow = null; // To track the table row (<tr> element) being updated
            let selectedLoanId = null; // To track the ID of the loan being updated
            let selectedAction = ""; // To track the selected action (Approved/Rejected/Pending)
            let originalStatusOfSelectedRow = ""; // To revert if action is cancelled

            // Function to update the table based on the filter
            function applyFilter() {
                const filterValue = $("#filterStatus").val();
                let visibleRowCount = 0;

                allLoanRows.forEach(row => {
                    const $row = $(row);
                    const status = $row.data('current-status'); // Get current status from data attribute

                    if (filterValue === "All" || status === filterValue) {
                        $row.show(); // Show the row
                        visibleRowCount++;
                    } else {
                        $row.hide(); // Hide the row
                    }
                });

                $("#tableInfo").text(`Displaying ${visibleRowCount} loan application(s)` + (filterValue !== "All" ? ` with status: ${filterValue}.` : "."));

                // If no rows are visible, show a message
                if (visibleRowCount === 0) {
                    if ($('#loanTableBody').find('.no-applications-message').length === 0) {
                         $('#loanTableBody').append(`<tr><td colspan="7" class="no-applications-message"><i class="fas fa-info-circle me-2"></i>No loan applications match the current filter.</td></tr>`);
                    }
                } else {
                    $('#loanTableBody').find('.no-applications-message').remove(); // Remove message if rows are visible
                }
            }


            // Handle Action Dropdown Change
            $("#loanTableBody").on("change", ".action-dropdown", function () {
                selectedRow = $(this).closest("tr");
                selectedLoanId = selectedRow.data("loan-id");
                selectedAction = $(this).val(); // "Approved", "Rejected", "Pending"
                originalStatusOfSelectedRow = selectedRow.data('current-status'); // Store current status

                // Update modal text and show confirmation modal
                $("#actionTypeStrong").text(selectedAction.toLowerCase());
                const confirmationModalElement = document.getElementById('confirmationModal');
                const confirmationModal = bootstrap.Modal.getOrCreateInstance(confirmationModalElement);
                confirmationModal.show();
            });

            // Handle Confirm Action Button in Modal
            $("#confirmActionBtn").on("click", function () {
                if (!selectedRow || selectedLoanId === null || selectedAction === "") {
                    // This should ideally not happen if logic is correct
                    alert("Error: No loan selected or action defined.");
                    return;
                }

                // Send AJAX request to update the status on the server
                $.ajax({
                    url: '@Url.Action("UpdateLoanStatus", "Admin")', // Point to your AdminController's UpdateLoanStatus action
                    type: 'POST',
                    data: { loanId: selectedLoanId, status: selectedAction },
                    headers: { // Include anti-forgery token for POST requests
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            // Update the client-side data attribute and visual elements
                            selectedRow.data('current-status', response.newStatus); // Update data attribute
                            const $statusBadge = selectedRow.find(".status-badge");
                            $statusBadge.text(response.newStatus);
                            $statusBadge.removeClass("bg-success-soft bg-danger-soft bg-warning-soft bg-secondary-soft");

                            let newStatusClass = "";
                            switch (response.newStatus) {
                                case "Approved":
                                    newStatusClass = "bg-success-soft";
                                    break;
                                case "Rejected":
                                    newStatusClass = "bg-danger-soft";
                                    break;
                                case "Pending":
                                default:
                                    newStatusClass = "bg-warning-soft";
                                    break;
                            }
                            $statusBadge.addClass(newStatusClass);

                            // Ensure the dropdown shows the confirmed status
                            selectedRow.find(".action-dropdown").val(response.newStatus);

                            // Re-apply filter in case the status change affects visibility
                            applyFilter();

                            console.log("Loan status updated successfully!");
                        } else {
                            alert("Failed to update loan status: " + response.message);
                            // Revert dropdown if server update failed
                            selectedRow.find(".action-dropdown").val(originalStatusOfSelectedRow);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert("An error occurred: " + xhr.responseText);
                        // Revert dropdown if AJAX call failed
                        if (selectedRow) {
                             selectedRow.find(".action-dropdown").val(originalStatusOfSelectedRow);
                        }
                    },
                    complete: function() {
                        // Close the confirmation modal regardless of success/failure
                        const confirmationModalElement = document.getElementById('confirmationModal');
                        const confirmationModal = bootstrap.Modal.getInstance(confirmationModalElement);
                        confirmationModal.hide();

                        // Clear selection state
                        selectedRow = null;
                        selectedLoanId = null;
                        selectedAction = "";
                        originalStatusOfSelectedRow = "";
                    }
                });
            });

            // Handle Modal Close/Cancel - Revert dropdown if action was not confirmed
            $('#confirmationModal').on('hidden.bs.modal', function () {
                // If selectedRow is not null, it means the modal was dismissed without confirming
                if (selectedRow) {
                    const $dropdown = $(selectedRow).find(".action-dropdown");
                    $dropdown.val(originalStatusOfSelectedRow); // Revert to original value
                }
                // Always clear selection state after modal closes
                selectedRow = null;
                selectedLoanId = null;
                selectedAction = "";
                originalStatusOfSelectedRow = "";
            });


            // Handle Filter Dropdown Change
            $("#filterStatus").on("change", applyFilter);

            // Initial call to apply filter (to set initial info text and handle empty state)
            applyFilter();

            // Sidebar Toggle Functionality (ensure these elements exist in AdminUtility.cshtml)
            $("#menu-toggle").click(function(e) {
                e.preventDefault();
                $("#wrapper").toggleClass("toggled");
                $(this).find("i").toggleClass("fa-bars fa-times"); // Optional: change icon
            });

            // Sidebar active link handling (example, can be expanded)
            $('#sidebar-wrapper .list-group-item').on('click', function(e) {
                var currentActive = $('#sidebar-wrapper .list-group-item.active');
                currentActive.removeClass('active');
                $(this).addClass('active');
            });
        });
    </script>
</body>
</html>